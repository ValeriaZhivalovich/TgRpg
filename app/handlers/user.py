import os
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from sqlalchemy.ext.asyncio import AsyncSession

from app.database.request import *
import app.keyboards as kb

router = Router()


class Reg(StatesGroup):
    name = State()
    last_name = State()

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    user = await set_user(message.from_user.id)
    if user:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{user.username}!</b> üéÆ\n"
            "–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?",
            parse_mode="HTML",
            reply_markup=kb.menu_kb
        )
        await state.clear()
    else:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø—É—Ç–Ω–∏–∫ {message.from_user.username}! üåü\n\n"
            "–Ø ‚Äî –•—Ä–∞–Ω–∏—Ç–µ–ª—å –ì–∏–ª—å–¥–∏–∏ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–π. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∞—à –ø—É—Ç—å, "
            "–º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ –≤–∞—Å.\n\n"
            "–ö–∞–∫ –≤–∞—Å <b>–∑–æ–≤—É—Ç</b>? üìù",
            parse_mode="HTML"
        )
        await state.set_state(Reg.name)

@router.message(Reg.name)
async def reg_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.last_name)
    await message.answer(
        "–•–æ—Ä–æ—à–æ, –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à–µ –∏–º—è. –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è —É –≤–∞—Å <b>—Ñ–∞–º–∏–ª–∏—è</b>? üèõÔ∏è",
        parse_mode="HTML"
    )

@router.message(Reg.last_name)
async def reg_lastname(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    data = await state.get_data()
    await add_user(
        tg_id=message.from_user.id,
        name=data['name'],
        last_name=data['last_name'],
    )
    await state.clear()
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! üéâ\n"
        "–í–∞—à–µ –∏–º—è –∑–∞–Ω–µ—Å–µ–Ω–æ –≤ –ë–∞–∑—É –ì–∏–ª—å–¥–∏–∏. –ß—Ç–æ –¥–∞–ª—å—à–µ?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=kb.menu_kb
    )



# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@router.message(F.text == "üßù‚Äç‚ôÄÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    tg_id = message.from_user.id

    user = await set_user(tg_id)

    if not user:
        await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    stats_text = (
        f"üßô‚Äç‚ôÇÔ∏è <b>–í–∞—à –≥–µ—Ä–æ–π</b>\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
        f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {user.energy}/50\n"
        f"‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ: {user.hp}/100\n"
        f"‚ú® –û–ø—ã—Ç: {user.xp}/{user.level * 100}\n"
        f"üí∞ –ó–æ–ª–æ—Ç–æ: {user.gold}"
    )

    await message.answer(stats_text,parse_mode="HTML", reply_markup=kb.profile_kb)


# === –ü–æ–¥–º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è ===
@router.callback_query(F.data == 'skills')
async def show_skills(call: CallbackQuery):
    await call.message.edit_text("üîÆ –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏...")


@router.callback_query(F.data == 'achievements')
async def show_achievements(call: CallbackQuery):
    await call.message.edit_text("üèÜ –í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏...")


@router.callback_query(F.data == 'inventory')
async def show_inventory(call: CallbackQuery):
    tg_id = call.from_user.id

    async with async_session() as session:
        user = await set_user(tg_id)

        if not user:
            await call.message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return

        inventory_items = await get_inventory(user.id)

        if not inventory_items:
            await call.message.edit_text("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç...")
            return

        inventory_text = "üéí <b>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b>\n\n"
        for inv_item in inventory_items:
            item = inv_item.item  # ‚úÖ –¢–µ–ø–µ—Ä—å —ç—Ç–æ Item, –∞ inv_item ‚Äî InventoryItem
            status = "–æ–¥–µ—Ç" if inv_item.equipped else "–Ω–µ –æ–¥–µ—Ç"
            inventory_text += (
                f"‚ñ´Ô∏è <b>{item.name}</b> x{inv_item.quantity}\n"
                f"   ‚Äî {item.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                f"   ‚Äî –°—Ç–∞—Ç—É—Å: {status}\n\n"
            )

    await call.message.edit_text(inventory_text, parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data == 'my_pets')
async def show_pets(call: CallbackQuery):
    await call.message.edit_text("üê∂ –£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤...")


# === –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á" ===
@router.message(F.text == "üìú –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def show_tasks_menu(message: Message):
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á:", reply_markup=kb.tasks_kb)


# === –ü–æ–¥–º–µ–Ω—é –∑–∞–¥–∞—á ===
@router.callback_query(F.data == 'active_task')
async def show_active_tasks(call: CallbackQuery):
    await call.message.edit_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n‚Äî –ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã\n‚Äî –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É", reply_markup=kb.active_task_kb)


@router.callback_query(F.data == 'complite_task')
async def show_completed_tasks(call: CallbackQuery):
    await call.message.edit_text("‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=kb.tasks_kb)


@router.callback_query(F.data == 'creste_task')
async def create_new_task(call: CallbackQuery):
    await call.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏...")


# === –ü–æ–¥–º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ ===
@router.callback_query(F.data == 'delete_active_task')
async def delete_task(call: CallbackQuery):
    await call.message.edit_text("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=kb.tasks_kb)


@router.callback_query(F.data == 'change_active_task')
async def edit_task(call: CallbackQuery):
    await call.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")


# === –ö–Ω–æ–ø–∫–∞ "–†—ã–Ω–æ–∫" ===
@router.message(F.text == "‚öñÔ∏è –†—ã–Ω–æ–∫")
async def show_market(message: Message):
    await message.answer("üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫!", reply_markup=kb.market_kb)


# === –ü–æ–¥–º–µ–Ω—é —Ä—ã–Ω–∫–∞ ===
@router.callback_query(F.data == 'market_potion')
async def show_potions(call: CallbackQuery):
    await call.message.edit_text("üß™ –ó–µ–ª—å—è:\n‚Äî –ó–µ–ª—å–µ —ç–Ω–µ—Ä–≥–∏–∏ (+10)\n‚Äî –ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è (+10)")


@router.callback_query(F.data == 'market_pets')
async def show_pets_shop(call: CallbackQuery):
    await call.message.edit_text("üê∂ –ü–∏—Ç–æ–º—Ü—ã:\n‚Äî –ö–æ—Ç–∏–∫\n‚Äî –©–µ–Ω–æ–∫\n‚Äî –ß–µ—Ä–µ–ø–∞—à–∫–∞")


@router.callback_query(F.data == 'market_ticket')
async def show_tickets(call: CallbackQuery):
    await call.message.edit_text("üéü –ë–∏–ª–µ—Ç—ã:\n‚Äî –ù–∞ —Ç—É—Ä–Ω–∏—Ä\n‚Äî –í –ø–æ–¥–∑–µ–º–µ–ª—å–µ")


# === –ö–Ω–æ–ø–∫–∞ "–ë–æ—Å—Å—ã/–ö–≤–µ—Å—Ç—ã" ===
@router.message(F.text == "‚öîÔ∏è –ë–æ—Å—Å—ã/–ö–≤–µ—Å—Ç—ã")
async def show_bosses(message: Message):
    await message.answer("üëπ –ó–¥–µ—Å—å –±—É–¥—É—Ç –±–æ—Å—Å—ã –∏ –∫–≤–µ—Å—Ç—ã!")


# === –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ===
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    await message.answer("üõ† –ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")



